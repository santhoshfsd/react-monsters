{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","name","CardList","monsters","map","App","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAGaA,G,YAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAErC,OAAO,uBAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EACxDI,SAAUH,MCJLI,G,YAAO,SAACC,GACjB,OAAO,sBAAKJ,UAAU,iBAAf,UACH,qBAAKK,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,4BACR,+BAA4BH,EAAME,QAAQE,KAA1C,MAASJ,EAAME,QAAQC,SCClBE,EAAW,SAACL,GACrB,OAAO,sBAAKJ,UAAU,YAAf,UAECI,EAAMM,SAASC,KAAI,SAAAL,GACf,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,OAH/B,QC0CIK,E,kDAtCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXH,SAAU,GACVI,YAAa,IAEf,EAAKf,aAAe,EAAKA,aAAagB,KAAlB,gBANR,E,gEASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEX,SAAUU,S,mCAInBE,GACXC,KAAKF,SAAS,CAAEP,YAAaQ,EAAEE,OAAOC,U,+BAI/B,MAG2BF,KAAKV,MAA/BH,EAHD,EAGCA,SAAUI,EAHX,EAGWA,YACZY,EAAkBhB,EAASiB,QAAO,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASf,EAAYc,kBAEnG,OAAQ,sBAAK5B,UAAU,MAAf,UACN,mDACA,cAAC,EAAD,CAAWF,YAAY,iBAAiBC,aAAcwB,KAAKxB,eAC3D,cAAC,EAAD,CAAUW,SAAUgB,W,GAnCRI,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.add1a14b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n\r\n    return <input className=\"search\" type=\"search\" placeholder={placeholder}\r\n        onChange={handleChange}></input>\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport './card.styles.css'\r\nexport const Card = (props) => {\r\n    return <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set6&size=180x180`} />\r\n        <h1 key={props.monster.id}>{props.monster.name} </h1>\r\n    </div>\r\n}","import React from 'react'\r\n\r\nimport './card-list.styles.css'\r\nimport { Card } from './../card/card.component'\r\n\r\n\r\nexport const CardList = (props) => {\r\n    return <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(monster => {\r\n                return <Card key={monster.id} monster={monster}></Card>\r\n            })\r\n        } </div>\r\n}","import React, { Component } from 'react'\r\nimport './App.css';\r\n\r\n\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\n\r\nimport { CardList } from './components/card-list/card-list.component';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => {\r\n        return response.json()\r\n      })\r\n      .then(users => {\r\n        this.setState({ monsters: users })\r\n      });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n\r\n\r\n  render() {\r\n    // render any js\r\n    // destructure\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n    return (<div className=\"App\">\r\n      <h1> Monster Rolodex></h1>\r\n      <SearchBox placeholder=\"search monster\" handleChange={this.handleChange} />\r\n      <CardList monsters={filteredMonster}></CardList>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}